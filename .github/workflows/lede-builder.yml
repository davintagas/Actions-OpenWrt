#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: Lede

on:
  repository_dispatch:
  workflow_dispatch:

env:
  FREE_DISK_SH: scripts/free_disk_space.sh
  ENV_SH: scripts/environment.sh
  REPO_URL: https://github.com/coolsnowwolf/lede.git
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: lede-master/config
  DIY_P1_SH: lede-master/diy-part1.sh
  DIY_P2_SH: lede-master/diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        chmod +x $FREE_DISK_SH && $FREE_DISK_SH
        sudo -E apt-get -qq update -y
        sudo -E apt-get -qq full-upgrade -y
        chmod +x $ENV_SH && $ENV_SH
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo timedatectl set-timezone "$TZ"
        docker image prune -a -f
        docker container prune -f
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Check space usage 1
      if: (!cancelled())
      run: df -hT

    - name: Clone source code
      working-directory: /workdir
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Enable caching
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        toolchain: 'true'
        mixkey: 'lede'
        prefix: ${{ github.workspace }}/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    # - name: Download package
    #   id: package
    #   run: |
    #     cd openwrt
    #     make defconfig
    #     make download -j8
    #     find dl -size -1024c -exec ls -l {} \;
    #     find dl -size -1024c -exec rm -f {} \;

    - name: Check space usage 2
      if: (!cancelled())
      run: df -hT

    - name: Compilation toolchain
      id: mtools
      run: |
        cd openwrt
        make defconfig
        echo -e "$(($(nproc)+1)) thread compile"
        make tools/compile -j$(($(nproc)+1)) || make tools/compile -j1 V=s
        make toolchain/compile -j$(($(nproc)+1)) || make toolchain/compile -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Check space usage 3_1
      if: (!cancelled())
      run: df -hT

    - name: Cleaning up toolchain compilation intermediates...
      if: steps.mtools.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt
        rm -rf dl/*
        rm -rf build_dir/toolchain-*

    - name: Check space usage 3_2
      if: (!cancelled())
      run: df -hT

    - name: Compiling the kernel
      id: mkernel
      if: steps.mtools.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make target/linux/compile -j$(($(nproc)+1)) || make target/linux/compile -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Check space usage 4
      if: (!cancelled())
      run: df -hT

    - name: Compile plugin
      id: mpackage
      if: steps.mkernel.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make package/compile -j$(($(nproc)+1)) || make package/compile -j1 V=s
        make package/index
        make package/install -j$(nproc) || make package/install -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Check space usage 5
      if: (!cancelled())
      run: df -hT

    - name: Clear plugin compiled files
      id: cpackage
      if: steps.mpackage.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt
        rm -rf build_dir/target-*/host
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Check space usage 6
      if: (!cancelled())
      run: df -hT

    - name: Compile the firmware
      id: compile
      if: steps.cpackage.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make target/install -j$(nproc) || make target/install -j1 V=s
        make json_overview_image_info
        make checksum
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Check space usage 7
      if: (!cancelled())
      run: df -hT

    # - name: Compile the firmware
    #   id: compile
    #   run: |
    #     cd openwrt
    #     echo -e "$(nproc) thread compile"
    #     make -j$(nproc) || make -j1 || make -j1 V=s
    #     echo "status=success" >> $GITHUB_OUTPUT
    #     grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
    #     [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
    #     echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    # - name: Check space usage
    #   if: (!cancelled())
    #   run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf *.bin
        rm -rf *.buildinfo
        rm -rf *.json
        rm -rf *.manifest
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d_lede")" >> $GITHUB_OUTPUT
        touch release.txt
        echo -e "Build Lede for R1 PLUS LTS" >> release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "ðŸ”— [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
